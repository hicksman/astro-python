import numpy as np
from matplotlib import pyplot as plt
from sklearn.tree import DecisionTreeRegressor

# paste your get_features_targets function here
def get_features_targets(data):
  features = np.array([data['u'] - data['g'], data['g'] - data['r'], data['r'] - data['i'], data['i'] - data['z']]).T
  targets = np.array(data['redshift'])
  return features, targets

# paste your median_diff function here
def median_diff(predicted, actual):
  result = np.median(abs(predicted - actual))
  return result


# Complete the following function
def accuracy_by_treedepth(features, targets, depths):
  # split the data into testing and training sets
  split = features.shape[0]//2
  train_features = features[:split]
  test_features = features[split:]
  train_targets = targets[:split]
  test_targets = targets[split:]
  # initialise arrays or lists to store the accuracies for the below loop

  # loop through depths
  median_diff_train = []
  median_diff_test = []
  for depth in depths:
    # initialize model with the maximum depth. 
    dtr = DecisionTreeRegressor(max_depth=depth)

    # train the model using the training set
    dtr.fit(train_features, train_targets)
    # get the predictions for the training set and calculate their median_diff
    predictions_train = dtr.predict(train_features)
    median_diff_train.append(median_diff(predictions_train, train_targets))
    # get the predictions for the testing set and calculate their median_diff
    predictions_test = dtr.predict(test_features)
    median_diff_test.append(median_diff(predictions_test, test_targets))
  # return the accuracies for the training and testing sets
  return median_diff_train, median_diff_test


if __name__ == "__main__":
  data = np.load('sdss_galaxy_colors.npy')
  features, targets = get_features_targets(data)

  # Generate several depths to test
  tree_depths = [i for i in range(1, 36, 2)]

  # Call the function
  train_med_diffs, test_med_diffs = accuracy_by_treedepth(features, targets, tree_depths)
  print("Depth with lowest median difference : {}".format(tree_depths[test_med_diffs.index(min(test_med_diffs))]))
    
  # Plot the results
  train_plot = plt.plot(tree_depths, train_med_diffs, label='Training set')
  test_plot = plt.plot(tree_depths, test_med_diffs, label='Validation set')
  plt.xlabel("Maximum Tree Depth")
  plt.ylabel("Median of Differences")
  plt.legend()
  plt.show()
