import numpy as np
import time
def angular_dist(r1, d1, r2, d2):
  a = np.sin(np.abs(d1 - d2)/2)**2
  b = np.cos(d1)*np.cos(d2)*np.sin(np.abs(r1 - r2)/2)**2
  return 2*np.arcsin(np.sqrt(a + b))

#Функция crossmatch(cat1, cat2, max_radius) ищет ближайшие объекты из второго каталога (cat2) к каждому объекту из первого (cat1) и возвращает:
#список совпадений (если расстояние меньше max_radius)
#список объектов без совпадений
#время, затраченное на выполнение
def crossmatch(cat1, cat2, max_radius):
  start = time.perf_counter() #Запоминаем текущее время для замера скорости выполнения функции.
  max_radius = np.radians(max_radius) #Т.к. угловые расстояния считаются в радианах, радиус тоже нужно перевести.
  
  matches = [] #matches — хранит кортежи вида (id1, id2, расстояние)
  no_matches = [] #no_matches — id объектов из cat1, у которых нет близких объектов в cat2

  # Convert coordinates to radians
  cat1 = np.radians(cat1)
  cat2 = np.radians(cat2)
  
  order = np.argsort(cat2[:, 1]) # это индексы, которые упорядочивают cat2 по dec
  cat2_ordered = cat2[order] # Ты берёшь массив cat2 и переставляешь строки в новом порядке, заданном индексами order.


  
  
  for id1, (ra1, dec1) in enumerate(cat1): #enumerate генерирует индекс объекта 
    min_dist = np.inf #— это положительная бесконечность в NumPy, или min_dist = float('inf')
    min_id2 = None
    max_dec = dec1 + max_radius
    
    #найти в cat2_ordered только те строки, где dec2 находится в пределах [dec1 - max_radius, dec1 + max_radius].
    #1. возьмем массив dec2
    dec2_sorted = cat2_ordered[:, 1]

    #2. Вычислим границы диапазона
    dec_min = dec1 - max_radius
    dec_max = dec1 + max_radius

    #3. Найдем старт и стоп индексы
    start_index = np.searchsorted(dec2_sorted, dec_min, side = 'left')
    stop_index = np.searchsorted(dec2_sorted, dec_max, side = 'left')
    for id2 in range(start_index, stop_index):
      ra2, dec2 = cat2_ordered[id2] #Это распаковка координат объекта с индексом id2 в массиве cat2_ordered
      dist = angular_dist(ra1, dec1, ra2, dec2)
      if dist < min_dist:
        min_id2 = order[id2]
        min_dist = dist

        
    # Ignore match if it's outside the maximum radius
    if min_dist > max_radius:
      no_matches.append(id1)
    else:
      matches.append((id1, min_id2, np.degrees(min_dist)))
    
  time_taken = time.perf_counter() - start #Считаем, сколько времени занял весь процесс сопоставления.
  return matches, no_matches, time_taken




# You can use this to test your function.
# Any code inside this `if` statement will be ignored by the automarker.
if __name__ == '__main__':
  # The example in the question
  cat1 = np.array([[180, 30], [45, 10], [300, -45]])
  cat2 = np.array([[180, 32], [55, 10], [302, -44]])
  matches, no_matches, time_taken = crossmatch(cat1, cat2, 5)
  print('matches:', matches)
  print('unmatched:', no_matches)
  print('time taken:', time_taken)

  # A function to create a random catalogue of size n
  def create_cat(n):
    ras = np.random.uniform(0, 360, size=(n, 1))
    decs = np.random.uniform(-90, 90, size=(n, 1))
    return np.hstack((ras, decs))

  # Test your function on random inputs
  np.random.seed(0)
  cat1 = create_cat(10)
  cat2 = create_cat(20)
  matches, no_matches, time_taken = crossmatch(cat1, cat2, 5)
  print('matches:', matches)
  print('unmatched:', no_matches)
  print('time taken:', time_taken)
